import re
import matplotlib
import numpy as np

matplotlib.use("Agg")
from matplotlib.pylab import plt


aachen = {
    "mixvpr": {
        "0.1": "19.4 / 31.7 / 62.9	4.7 / 11.0 / 39.3",
        "0.2": "39.9 / 51.1 / 71.6	14.7 / 23.6 / 47.6",
        "0.3": "79.7 / 86.8 / 94.2	58.6 / 78.5 / 88.0",
        "0.4": "85.0 / 91.0 / 96.5	70.7 / 84.8 / 91.6",
        "0.5": "85.3 / 91.0 / 96.0	68.1 / 81.2 / 88.5",
        "0.6": "84.3 / 90.2 / 95.3	64.4 / 77.0 / 85.9",
        "0.7": "84.2 / 89.6 / 94.5	62.3 / 74.3 / 81.7",
        "0.8": "84.0 / 89.4 / 94.7	62.8 / 72.8 / 81.7",
        "0.9": "84.1 / 89.7 / 94.7	60.7 / 71.2 / 81.2",
        "1": "	84.0 / 89.2 / 94.8	61.3 / 71.7 / 80.6",
    },
    "salad": {
        "0.1": "27.3 / 39.4 / 66.3	8.9 / 14.1 / 37.7",
        "0.2": "79.5 / 87.4 / 95.1	61.8 / 79.1 / 89.5",
        "0.3": "86.9 / 92.0 / 96.8	70.2 / 84.8 / 92.7",
        "0.4": "86.5 / 91.7 / 96.4	70.2 / 83.2 / 91.6",
        "0.5": "84.8 / 90.2 / 96.0	67.5 / 79.1 / 86.9",
        "0.6": "84.1 / 89.6 / 95.0	65.4 / 75.9 / 85.3",
        "0.7": "83.7 / 89.7 / 94.5	63.9 / 74.3 / 83.8",
        "0.8": "84.3 / 89.8 / 94.8	61.8 / 72.8 / 81.7",
        "0.9": "84.2 / 89.4 / 94.7	60.7 / 71.2 / 80.6",
        "1": "84.0 / 89.2 / 94.8	61.3 / 71.7 / 80.6",
    },
    "eigen": {
        "0.1": "19.5 / 31.9 / 61.3	5.2 / 13.6 / 41.4",
        "0.2": "41.9 / 51.2 / 70.8	18.3 / 26.2 / 48.7",
        "0.3": "73.9 / 82.9 / 91.3	60.2 / 69.1 / 83.2",
        "0.4": "84.6 / 90.8 / 95.8	68.1 / 83.8 / 92.7",
        "0.5": "86.8 / 92.2 / 96.7	70.2 / 86.9 / 95.3",
        "0.6": "85.9 / 90.9 / 96.1	71.7 / 83.8 / 92.1",
        "0.7": "85.1 / 90.8 / 95.4	66.5 / 79.6 / 88.0",
        "0.8": "84.0 / 89.9 / 94.4	63.4 / 73.8 / 83.2",
        "0.9": "84.5 / 89.3 / 95.0	61.3 / 72.8 / 81.7",
        "1": "	84.0 / 89.2 / 94.8	61.3 / 71.7 / 80.6",
    },
    "crica": {
        "0.1": "31.2 / 43.4 / 68.2	10.5 / 19.4 / 48.2",
        "0.2": "81.3 / 87.6 / 94.3	63.4 / 79.1 / 88.5",
        "0.3": "85.8 / 91.5 / 96.4	71.2 / 87.4 / 94.8",
        "0.4": "86.2 / 92.1 / 96.4	71.2 / 82.7 / 91.1",
        "0.5": "85.3 / 90.5 / 95.6	66.5 / 78.0 / 86.4",
        "0.6": "84.1 / 89.8 / 94.5	64.4 / 75.4 / 84.8",
        "0.7": "83.4 / 89.2 / 94.5	62.3 / 72.8 / 82.7",
        "0.8": "83.7 / 89.1 / 94.3	62.8 / 73.3 / 82.7",
        "0.9": "84.2 / 89.4 / 94.3	61.8 / 73.3 / 81.2",
        "1": "84.0 / 89.2 / 94.8	61.3 / 71.7 / 80.6",
    },
}

robotcar = {
    "mixvpr": {
        "0.1": "31.7 / 66.3 / 97.6	2.6 / 11.7 / 46.9",
        "0.2": "59.5 / 92.5 / 99.4	11.4 / 37.5 / 63.6",
        "0.3": "59.9 / 93.5 / 99.9	18.4 / 47.6 / 68.3",
        "0.4": "61.1 / 94.0 / 100.0	23.1 / 56.9 / 74.8",
        "0.5": "61.9 / 94.0 / 100.0	22.4 / 57.1 / 76.7",
        "0.6": "61.8 / 94.1 / 100.0	18.9 / 45.9 / 67.4",
        "0.7": "60.6 / 94.0 / 100.0	14.5 / 40.1 / 57.8",
        "0.8": "60.8 / 93.6 / 100.0	11.9 / 34.7 / 54.1",
        "0.9": "60.7 / 93.8 / 99.9	11.9 / 32.9 / 51.3",
        "1": "60.8 / 93.8 / 99.9	11.9 / 33.6 / 49.7",
    },
    "salad": {
        "0.1": "53.2 / 88.2 / 99.6	7.5 / 26.1 / 70.4",
        "0.2": "60.6 / 93.2 / 100.0	29.4 / 73.0 / 95.8",
        "0.3": "61.1 / 93.7 / 100.0	27.3 / 79.7 / 99.1",
        "0.4": "61.3 / 93.9 / 100.0	30.8 / 72.5 / 97.4",
        "0.5": "61.5 / 93.8 / 100.0	21.0 / 52.0 / 79.7",
        "0.6": "60.9 / 93.9 / 100.0	17.5 / 40.8 / 61.1",
        "0.7": "60.6 / 93.8 / 99.9	13.3 / 35.2 / 54.1",
        "0.8": "60.5 / 93.8 / 99.9	11.7 / 35.0 / 52.2",
        "0.9": "61.0 / 93.8 / 99.9	11.7 / 33.8 / 49.9",
        "1": "60.8 / 93.8 / 99.9	11.9 / 33.6 / 49.7",
    },
    "eigen": {
        "0.1": "30.9 / 65.8 / 96.9	1.6 / 9.1 / 33.3",
        "0.2": "57.4 / 91.3 / 99.8	10.0 / 25.2 / 41.0",
        "0.3": "60.6 / 93.3 / 100.0	12.6 / 32.9 / 46.6",
        "0.4": "60.9 / 93.6 / 100.0	17.0 / 38.0 / 49.4",
        "0.5": "61.3 / 93.3 / 100.0	20.3 / 42.7 / 53.6",
        "0.6": "61.0 / 93.8 / 100.0	17.2 / 43.8 / 58.0",
        "0.7": "61.1 / 94.0 / 100.0	15.4 / 40.1 / 55.2",
        "0.8": "61.1 / 94.0 / 100.0	14.7 / 36.8 / 52.4",
        "0.9": "61.1 / 93.8 / 99.9	11.4 / 32.6 / 50.3",
        "1": "60.8 / 93.8 / 99.9	11.9 / 33.6 / 49.7",
    },
    "crica": {
        "0.1": "53.6 / 88.1 / 98.6	8.9 / 29.6 / 64.6",
        "0.2": "60.2 / 93.3 / 99.9	23.1 / 62.7 / 82.5",
        "0.3": "60.8 / 93.8 / 100.0	31.9 / 73.7 / 89.0",
        "0.4": "61.3 / 93.6 / 100.0	26.1 / 64.1 / 88.3",
        "0.5": "61.3 / 94.0 / 100.0	19.8 / 49.9 / 72.3",
        "0.6": "61.1 / 93.8 / 100.0	15.9 / 41.7 / 60.1",
        "0.7": "60.6 / 93.8 / 100.0	13.1 / 37.3 / 53.6",
        "0.8": "60.8 / 93.7 / 99.9	11.7 / 34.5 / 50.6",
        "0.9": "60.7 / 93.7 / 99.9	11.7 / 33.1 / 49.9",
        "1": "60.8 / 93.8 / 99.9	11.9 / 33.6 / 49.7",
    },
}


def find_numbers(string_):
    pattern = r"[-+]?(?:\d*\.*\d+)"
    # res = "53.2 / 85.8 / 95.3	3.5 / 11.7 / 25.2"
    matches = re.findall(pattern, string_)
    numbers = list(map(float, matches))
    avg = sum(numbers) / len(matches)
    return avg


def main():
    plt.figure(figsize=(6, 10))

    plt.subplot(211)
    ds = aachen
    plt.ylim(0, 100)
    plt.xticks(np.arange(1, 11) / 10)
    plt.xlabel("lambda")
    plt.ylabel("% successfully localized images")
    markers = {
        "mixvpr": "o",
        "eigen": "d",
        "crica": "v",
        "salad": "s",
    }
    plt.title("Aachen Day/Night v1.1")
    plt.axhline(y=92.1, color="r", linestyle="--", label="hloc")
    plt.axhline(y=80.3, color="b", linestyle="--", label="vanilla")

    for method_ in ds:
        all_numbers = []
        for param_ in ds[method_]:
            res = ds[method_][param_]
            avg_res = find_numbers(res)
            all_numbers.append(avg_res)
        print(method_, all_numbers)
        plt.plot(
            np.arange(1, 11) / 10, all_numbers, marker=markers[method_], label=method_
        )
    plt.legend(loc=4)

    plt.subplot(212)

    ds = robotcar
    plt.ylim(0, 100)
    plt.xticks(np.arange(1, 11) / 10)
    plt.xlabel("lambda")
    plt.ylabel("% successfully localized images")
    markers = {
        "mixvpr": "o",
        "eigen": "d",
        "crica": "v",
        "salad": "s",
    }
    plt.title("RobotCar Seasons v2")
    plt.axhline(y=78.5, color="r", linestyle="--", label="hloc")
    plt.axhline(y=58.3, color="b", linestyle="--", label="vanilla")

    for method_ in ds:
        all_numbers = []
        for param_ in ds[method_]:
            res = ds[method_][param_]
            avg_res = find_numbers(res)
            all_numbers.append(avg_res)
        print(method_, all_numbers)
        plt.plot(
            np.arange(1, 11) / 10, all_numbers, marker=markers[method_], label=method_
        )
    plt.legend(loc=4)
    plt.tight_layout()

    plt.savefig(
        "ablation.pdf", format="pdf", dpi=600, bbox_inches="tight", pad_inches=0.1
    )


if __name__ == "__main__":
    main()
